/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace medpermapp.api.ModelsThrift
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class Patient : TBase
  {
    private int _id;
    private string _firstName;
    private string _lastName;
    private string _cnp;
    private string _fInitLetter;
    private string _registrationDate;
    private Address _address;

    public int Id
    {
      get
      {
        return _id;
      }
      set
      {
        __isset.id = true;
        this._id = value;
      }
    }

    public string FirstName
    {
      get
      {
        return _firstName;
      }
      set
      {
        __isset.firstName = true;
        this._firstName = value;
      }
    }

    public string LastName
    {
      get
      {
        return _lastName;
      }
      set
      {
        __isset.lastName = true;
        this._lastName = value;
      }
    }

    public string Cnp
    {
      get
      {
        return _cnp;
      }
      set
      {
        __isset.cnp = true;
        this._cnp = value;
      }
    }

    public string FInitLetter
    {
      get
      {
        return _fInitLetter;
      }
      set
      {
        __isset.fInitLetter = true;
        this._fInitLetter = value;
      }
    }

    public string RegistrationDate
    {
      get
      {
        return _registrationDate;
      }
      set
      {
        __isset.registrationDate = true;
        this._registrationDate = value;
      }
    }

    public Address Address
    {
      get
      {
        return _address;
      }
      set
      {
        __isset.address = true;
        this._address = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool id;
      public bool firstName;
      public bool lastName;
      public bool cnp;
      public bool fInitLetter;
      public bool registrationDate;
      public bool address;
    }

    public Patient() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                Id = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                FirstName = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                LastName = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                Cnp = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.String) {
                FInitLetter = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.String) {
                RegistrationDate = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.Struct) {
                Address = new Address();
                Address.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("Patient");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.id) {
          field.Name = "id";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Id);
          oprot.WriteFieldEnd();
        }
        if (FirstName != null && __isset.firstName) {
          field.Name = "firstName";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(FirstName);
          oprot.WriteFieldEnd();
        }
        if (LastName != null && __isset.lastName) {
          field.Name = "lastName";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(LastName);
          oprot.WriteFieldEnd();
        }
        if (Cnp != null && __isset.cnp) {
          field.Name = "cnp";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Cnp);
          oprot.WriteFieldEnd();
        }
        if (FInitLetter != null && __isset.fInitLetter) {
          field.Name = "fInitLetter";
          field.Type = TType.String;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(FInitLetter);
          oprot.WriteFieldEnd();
        }
        if (RegistrationDate != null && __isset.registrationDate) {
          field.Name = "registrationDate";
          field.Type = TType.String;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(RegistrationDate);
          oprot.WriteFieldEnd();
        }
        if (Address != null && __isset.address) {
          field.Name = "address";
          field.Type = TType.Struct;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          Address.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("Patient(");
      bool __first = true;
      if (__isset.id) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Id: ");
        __sb.Append(Id);
      }
      if (FirstName != null && __isset.firstName) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("FirstName: ");
        __sb.Append(FirstName);
      }
      if (LastName != null && __isset.lastName) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("LastName: ");
        __sb.Append(LastName);
      }
      if (Cnp != null && __isset.cnp) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Cnp: ");
        __sb.Append(Cnp);
      }
      if (FInitLetter != null && __isset.fInitLetter) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("FInitLetter: ");
        __sb.Append(FInitLetter);
      }
      if (RegistrationDate != null && __isset.registrationDate) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("RegistrationDate: ");
        __sb.Append(RegistrationDate);
      }
      if (Address != null && __isset.address) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Address: ");
        __sb.Append(Address== null ? "<null>" : Address.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
